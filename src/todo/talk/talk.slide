Writing a modern web app
with Go, TDD, REST, and AngularJS

Francesc Campoy
Gopher at Google MTV
@francesc

* YouTube

A recording of this talk can be found on [[https://www.youtube.com/watch?v=wB1hoUJDbk0][YouTube]]

* Agenda

- Some live coding.

- Building a REST API.

- Deploying it on a stand-alone http server and App Engine.

- Building a web UI using the API.

* TODO

We're going to build:

.link http://campoy.cat/todo

And all the code is available on

.link http://github.com/campoy/todo

* Live coding, live testing

* Test Driven Development

.image redgreenrefactor.png 300 375

1. Write a unit test
2. Run it and watch it fail
3. Write just enough production code to make the test pass
4. Re-run the test and watch it pass

* import "testing"

Go's standard library offers a testing framework

.code ../task/task_test.go /TestNewTaskEmptyTitle/,/^}/

Running all the tests for a project

	$ go test github.com/campoy/todo/...
	?   	github.com/campoy/todo/server	[no test files]
	ok  	github.com/campoy/todo/task	0.011s
	?   	github.com/campoy/todo/todo	[no test files]

* Live testing

Running all your tests while coding.

	$ go get github.com/eaburns/Watch

	$ cd $GOPATH/src/github.com/campoy/todo/task

	$ Watch -t go test
	go test
	PASS
	ok  	github.com/campoy/todo/task	0.017s
	2013-12-09 16:19:20.181669437 -0800 PST
	...

* Live coding!

* After some test writing and passing

We would end up with a package with a *nice* API

.link http://godoc.org/github.com/campoy/todo/task

* REST API

* REST = HTTP + JSON

Go provides an excellent `net/http` package

.code simple.go /func main/,/^}/

And a convenient JSON package

.code simple.go /func handler/,/^}/

* Addition as a Service

The addition web service accepts an `AddRequest`:

.code rest.go /AddRequest/,/^}/

And returns an `AddResponse`

.code rest.go /AddResponse/,/^}/

* Addition as a Service

The complete HTTP handler.

.code rest.go /func addHandler/,/^}/

* Addition as a Service

The client side code is pretty much the inverse of the handler.

.code rest.go /func add\(/,/^}/

* Addition as a Service

Let's run the server in the background and send some requests.

.play rest.go /func main/,/^}/

* TaskManager

* REST API for TaskManager

Methods that we offer, easy to express using `github.com/gorilla/mux`

.code ../server/server.go /PathPrefix/

.code ../server/server.go /RegisterHandlers/,/^}/

Listing all the tasks

.code ../server/server.go /func ListTasks/,/^}/

* REST API for TaskManager (continued)

Creating a new task

.code ../server/server.go /func NewTask/,/^}/

* Building a web client

* What we will build

.image screenshot.png

* Consuming REST API with AngularJS

Getting all the tasks

	$http.get('/task/').
		success(function(data) { $scope.tasks = data.Tasks; }).
		error(logError);

Toggling a task's Done state

	data = {ID: task.ID, Title: task.Title, Done: !task.Done}
	$http.put('/task/'+task.ID, data).
		error(logError).
		success(function() { task.Done = !task.Done });

* Deploying it

Running a stand-alone server

.code ../todo/local.go /main/,

* Deploying it on App Engine

The Go code

.code ../todo/appengine.go /package/,

* Deploying it on App Engine (continued)

The `app.yaml` configuration file

.code ../todo/app.yaml /application/,

In-memory storage is *not* persistent on App Engine!

* What's next?

- Go homepage

.link http://golang.org

- Learn Go from your browser

.link http://tour.golang.org

- Check the code

.link http://github.com/campoy/todo
