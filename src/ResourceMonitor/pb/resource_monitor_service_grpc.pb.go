// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: resource_monitor_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessorsServiceClient is the client API for ProcessorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorsServiceClient interface {
	GetProcessorsInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (*GetProcessorsResponse, error)
	SubscribeProcessorInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (ProcessorsService_SubscribeProcessorInfoClient, error)
	SubscribeProcessorsInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (ProcessorsService_SubscribeProcessorsInfoClient, error)
}

type processorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorsServiceClient(cc grpc.ClientConnInterface) ProcessorsServiceClient {
	return &processorsServiceClient{cc}
}

func (c *processorsServiceClient) GetProcessorsInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (*GetProcessorsResponse, error) {
	out := new(GetProcessorsResponse)
	err := c.cc.Invoke(ctx, "/LearningGoProjects.ResourceMonitor.ProcessorsService/GetProcessorsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorsServiceClient) SubscribeProcessorInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (ProcessorsService_SubscribeProcessorInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorsService_ServiceDesc.Streams[0], "/LearningGoProjects.ResourceMonitor.ProcessorsService/SubscribeProcessorInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorsServiceSubscribeProcessorInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessorsService_SubscribeProcessorInfoClient interface {
	Recv() (*GetProcessorsResponse, error)
	grpc.ClientStream
}

type processorsServiceSubscribeProcessorInfoClient struct {
	grpc.ClientStream
}

func (x *processorsServiceSubscribeProcessorInfoClient) Recv() (*GetProcessorsResponse, error) {
	m := new(GetProcessorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorsServiceClient) SubscribeProcessorsInfo(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (ProcessorsService_SubscribeProcessorsInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorsService_ServiceDesc.Streams[1], "/LearningGoProjects.ResourceMonitor.ProcessorsService/SubscribeProcessorsInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorsServiceSubscribeProcessorsInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessorsService_SubscribeProcessorsInfoClient interface {
	Recv() (*GetProcessorsResponse, error)
	grpc.ClientStream
}

type processorsServiceSubscribeProcessorsInfoClient struct {
	grpc.ClientStream
}

func (x *processorsServiceSubscribeProcessorsInfoClient) Recv() (*GetProcessorsResponse, error) {
	m := new(GetProcessorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorsServiceServer is the server API for ProcessorsService service.
// All implementations must embed UnimplementedProcessorsServiceServer
// for forward compatibility
type ProcessorsServiceServer interface {
	GetProcessorsInfo(context.Context, *GetProcessorsRequest) (*GetProcessorsResponse, error)
	SubscribeProcessorInfo(*GetProcessorsRequest, ProcessorsService_SubscribeProcessorInfoServer) error
	SubscribeProcessorsInfo(*GetProcessorsRequest, ProcessorsService_SubscribeProcessorsInfoServer) error
	mustEmbedUnimplementedProcessorsServiceServer()
}

// UnimplementedProcessorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorsServiceServer struct {
}

func (UnimplementedProcessorsServiceServer) GetProcessorsInfo(context.Context, *GetProcessorsRequest) (*GetProcessorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessorsInfo not implemented")
}
func (UnimplementedProcessorsServiceServer) SubscribeProcessorInfo(*GetProcessorsRequest, ProcessorsService_SubscribeProcessorInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProcessorInfo not implemented")
}
func (UnimplementedProcessorsServiceServer) SubscribeProcessorsInfo(*GetProcessorsRequest, ProcessorsService_SubscribeProcessorsInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProcessorsInfo not implemented")
}
func (UnimplementedProcessorsServiceServer) mustEmbedUnimplementedProcessorsServiceServer() {}

// UnsafeProcessorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorsServiceServer will
// result in compilation errors.
type UnsafeProcessorsServiceServer interface {
	mustEmbedUnimplementedProcessorsServiceServer()
}

func RegisterProcessorsServiceServer(s grpc.ServiceRegistrar, srv ProcessorsServiceServer) {
	s.RegisterService(&ProcessorsService_ServiceDesc, srv)
}

func _ProcessorsService_GetProcessorsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorsServiceServer).GetProcessorsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGoProjects.ResourceMonitor.ProcessorsService/GetProcessorsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorsServiceServer).GetProcessorsInfo(ctx, req.(*GetProcessorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorsService_SubscribeProcessorInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProcessorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorsServiceServer).SubscribeProcessorInfo(m, &processorsServiceSubscribeProcessorInfoServer{stream})
}

type ProcessorsService_SubscribeProcessorInfoServer interface {
	Send(*GetProcessorsResponse) error
	grpc.ServerStream
}

type processorsServiceSubscribeProcessorInfoServer struct {
	grpc.ServerStream
}

func (x *processorsServiceSubscribeProcessorInfoServer) Send(m *GetProcessorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessorsService_SubscribeProcessorsInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProcessorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorsServiceServer).SubscribeProcessorsInfo(m, &processorsServiceSubscribeProcessorsInfoServer{stream})
}

type ProcessorsService_SubscribeProcessorsInfoServer interface {
	Send(*GetProcessorsResponse) error
	grpc.ServerStream
}

type processorsServiceSubscribeProcessorsInfoServer struct {
	grpc.ServerStream
}

func (x *processorsServiceSubscribeProcessorsInfoServer) Send(m *GetProcessorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProcessorsService_ServiceDesc is the grpc.ServiceDesc for ProcessorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningGoProjects.ResourceMonitor.ProcessorsService",
	HandlerType: (*ProcessorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessorsInfo",
			Handler:    _ProcessorsService_GetProcessorsInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeProcessorInfo",
			Handler:       _ProcessorsService_SubscribeProcessorInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeProcessorsInfo",
			Handler:       _ProcessorsService_SubscribeProcessorsInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resource_monitor_service.proto",
}

// MemoryServiceClient is the client API for MemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryServiceClient interface {
	GetMemoryInfo(ctx context.Context, in *GetMemoryRequest, opts ...grpc.CallOption) (*GetMemoryResponse, error)
}

type memoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryServiceClient(cc grpc.ClientConnInterface) MemoryServiceClient {
	return &memoryServiceClient{cc}
}

func (c *memoryServiceClient) GetMemoryInfo(ctx context.Context, in *GetMemoryRequest, opts ...grpc.CallOption) (*GetMemoryResponse, error) {
	out := new(GetMemoryResponse)
	err := c.cc.Invoke(ctx, "/LearningGoProjects.ResourceMonitor.MemoryService/GetMemoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServiceServer is the server API for MemoryService service.
// All implementations must embed UnimplementedMemoryServiceServer
// for forward compatibility
type MemoryServiceServer interface {
	GetMemoryInfo(context.Context, *GetMemoryRequest) (*GetMemoryResponse, error)
	mustEmbedUnimplementedMemoryServiceServer()
}

// UnimplementedMemoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemoryServiceServer struct {
}

func (UnimplementedMemoryServiceServer) GetMemoryInfo(context.Context, *GetMemoryRequest) (*GetMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryInfo not implemented")
}
func (UnimplementedMemoryServiceServer) mustEmbedUnimplementedMemoryServiceServer() {}

// UnsafeMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServiceServer will
// result in compilation errors.
type UnsafeMemoryServiceServer interface {
	mustEmbedUnimplementedMemoryServiceServer()
}

func RegisterMemoryServiceServer(s grpc.ServiceRegistrar, srv MemoryServiceServer) {
	s.RegisterService(&MemoryService_ServiceDesc, srv)
}

func _MemoryService_GetMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGoProjects.ResourceMonitor.MemoryService/GetMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoryInfo(ctx, req.(*GetMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryService_ServiceDesc is the grpc.ServiceDesc for MemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningGoProjects.ResourceMonitor.MemoryService",
	HandlerType: (*MemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemoryInfo",
			Handler:    _MemoryService_GetMemoryInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_monitor_service.proto",
}
